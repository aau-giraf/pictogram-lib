package dk.aau.cs.giraf.pictogram;

import android.content.Context;
import android.graphics.Bitmap;
import android.media.MediaPlayer.OnCompletionListener;
import android.util.Log;
import android.view.Gravity;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

import dk.aau.cs.giraf.dblib.controllers.TagController;
import dk.aau.cs.giraf.dblib.models.Tag;

//TODO: Make custom ImageView and TextView with predefined "niceness"

/**
 * Extension of {@FrameLayout} used for GIRAF pictograms.
 *
 * For proper Pictogram initialization refere to {@link PictoFactory}.
 *
 * @author Croc
 *
 */
public class Pictogram extends FrameLayout {
    private static final String TAG = "Pictogram";

    /* TODO: add xml from Croc to the application, making it possible for others
       to use a more scalable image.*/

    private int id;
    private String name;
    private int pub; //1=true=public && 0=false=not public
    private Bitmap image_data;
    private byte[] sound_data;
    private String inline_text;
    private int author;

    /**
     * Constructor used by {@link PictoFactory} for populating the fields in a
     * Pictogram.
     *
     * <p> The input to this constructor is not verified because it only should
     * be used by a {@link PictoFactory}
     *
     * @deprecated As of next release this method will be protected and not for
     * use outside of pictogram.
     *
     * @param id usually an id generated by the database.
     * @param name name of the pictogram.
     * @param author id of the creator.
     * @param image_data the image used.
     * @param inline_text the label for the image.
     * @param sound_data the audio used.
     * @param pub if this pictogram is public or not.
     * @return A pictogram for use in GIRAF.
     */

    public Pictogram(int id, String name, int pub, Bitmap image_data, byte[] sound_data, String inline_text, int author, Context context)
    {
        super(context);
        this.id = id;
        this.name = name;
        this.pub = pub;
        this.image_data = image_data;
        this.sound_data = sound_data;
        this.inline_text = inline_text;
        this.author = author;
    }

    /**
     * Populates the view with both image and text, making it an actual viewable
     * view.
     */
    public void renderAll() {
        renderImage();
        renderText();
    }

    /**
     * Populates the view with text, making it an actual viewable view.
     * The gravity is by default set to {@value} TODO insert value
     * {@link #renderText(int)} can be used if you want to place the text.
     */
    public void renderText() {
        TextView text = new TextView(getContext());
        text.setText(inline_text);
        text.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM);
        this.addView(text);
    }

    /**
     * Populates the view with text, making it an actual viewable view.
     * @param gravity is the location of the text in the image.
     */
    public void renderText(int gravity) {
        TextView text = new TextView(getContext());
        text.setText(inline_text);
        text.setPadding(10, 10, 10, 10);
        text.setGravity(Gravity.CENTER_HORIZONTAL | gravity);
        this.addView(text);
    }

    /**
     * Populates the view with an image, making it an actual viewable view.
     */
    public void renderImage() {
        String msg = "SQLExeption handling image_data.";
        Bitmap img = image_data;

        ImageView image = new ImageView(getContext());
        image.setImageBitmap(img);
        this.addView(image);
    }

    /**
     * A check if the {@link sound_data} is null.
     */
    public boolean hasAudio() {
        return sound_data != null;
    }

    /**
     * Function used for playing audio and not doing any action when it finishes.
     */
    public void playAudio() {
        playAudio(null);
    }

    /**
     * Play audio using the {@link AudioPlayer} class written by digiPECS in 2011
     * @param listener the callback that will be run
     */
    public void playAudio(final OnCompletionListener listener){
        if(hasAudio()){
            new Thread(new Runnable(){
                    @Override
                                        public void run(){
                        AudioPlayer.INSTANCE.play(sound_data, listener);
                    }
                }).start();

            String msg = "Played audio: " + inline_text;
            Log.d(TAG, msg);
            //TODO check that the thread is stopped again at some point. [OLD PARROT TODO]
        } else {
            Log.d(TAG, "No sound attatched: " + id + "\n\tOn:" + inline_text);
        }
    }

    /**
     * @return name the name of the pictogram as represented in the database.
     */
    public String getName(){
        return name;
    }

    /**
     * @return shareable if true the pictogram is public and shareable, if false
     * it is not.
     */
    public boolean getShareable(){

        if (pub == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    /**
     * Returns the tags connected to this pictogram.
     */
    public List<String> getTags() {
        TagController tagController = new TagController(getContext());
        List<String> tags = new ArrayList<String>();

        for (Tag tag : tagController.getTagByPictogram(PictoFactory.convertPictogramToOasis(getContext(), this)))
        {
            tags.add(tag.getName());
        }

        return tags;
    }

    /**
     * @return textLabel the label used for the pictogram.
     */
    public String getTextLabel() { return inline_text; }

    /**
     * @return pictogramID the id which the pictogram is found under in the database.
     */
    public int getPictogramID() {
        return id;
    }
    public int getAuthorID() {
        return id;
    }

    public Bitmap getImageData() {
        return image_data;
    }

    public byte[] getSoundData() {
        return sound_data;
    }
}
